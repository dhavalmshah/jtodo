package in.thedevguys.domain;

import static in.thedevguys.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class BadgeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBadgeAllPropertiesEquals(Badge expected, Badge actual) {
        assertBadgeAutoGeneratedPropertiesEquals(expected, actual);
        assertBadgeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBadgeAllUpdatablePropertiesEquals(Badge expected, Badge actual) {
        assertBadgeUpdatableFieldsEquals(expected, actual);
        assertBadgeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBadgeAutoGeneratedPropertiesEquals(Badge expected, Badge actual) {
        assertThat(actual)
            .as("Verify Badge auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBadgeUpdatableFieldsEquals(Badge expected, Badge actual) {
        assertThat(actual)
            .as("Verify Badge relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getImage()).as("check image").isEqualTo(expected.getImage()))
            .satisfies(a ->
                assertThat(a.getCreatedAt())
                    .as("check createdAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getCreatedAt())
            )
            .satisfies(a ->
                assertThat(a.getUpdatedAt())
                    .as("check updatedAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getUpdatedAt())
            )
            .satisfies(a -> assertThat(a.getType()).as("check type").isEqualTo(expected.getType()))
            .satisfies(a -> assertThat(a.getCriteria()).as("check criteria").isEqualTo(expected.getCriteria()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBadgeUpdatableRelationshipsEquals(Badge expected, Badge actual) {
        assertThat(actual)
            .as("Verify Badge relationships")
            .satisfies(a -> assertThat(a.getUsers()).as("check users").isEqualTo(expected.getUsers()));
    }
}
