package in.thedevguys.domain;

import static in.thedevguys.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class UserAttributesAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserAttributesAllPropertiesEquals(UserAttributes expected, UserAttributes actual) {
        assertUserAttributesAutoGeneratedPropertiesEquals(expected, actual);
        assertUserAttributesAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserAttributesAllUpdatablePropertiesEquals(UserAttributes expected, UserAttributes actual) {
        assertUserAttributesUpdatableFieldsEquals(expected, actual);
        assertUserAttributesUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserAttributesAutoGeneratedPropertiesEquals(UserAttributes expected, UserAttributes actual) {
        assertThat(actual)
            .as("Verify UserAttributes auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserAttributesUpdatableFieldsEquals(UserAttributes expected, UserAttributes actual) {
        assertThat(actual)
            .as("Verify UserAttributes relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getEmail()).as("check email").isEqualTo(expected.getEmail()))
            .satisfies(a ->
                assertThat(a.getEmailVerified())
                    .as("check emailVerified")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getEmailVerified())
            )
            .satisfies(a -> assertThat(a.getImage()).as("check image").isEqualTo(expected.getImage()))
            .satisfies(a -> assertThat(a.getImageContentType()).as("check image contenty type").isEqualTo(expected.getImageContentType()))
            .satisfies(a ->
                assertThat(a.getCreatedAt())
                    .as("check createdAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getCreatedAt())
            )
            .satisfies(a ->
                assertThat(a.getUpdatedAt())
                    .as("check updatedAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getUpdatedAt())
            )
            .satisfies(a -> assertThat(a.getPassword()).as("check password").isEqualTo(expected.getPassword()))
            .satisfies(a -> assertThat(a.getLevel()).as("check level").isEqualTo(expected.getLevel()))
            .satisfies(a -> assertThat(a.getPoints()).as("check points").isEqualTo(expected.getPoints()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserAttributesUpdatableRelationshipsEquals(UserAttributes expected, UserAttributes actual) {
        assertThat(actual)
            .as("Verify UserAttributes relationships")
            .satisfies(a -> assertThat(a.getAssignedTodos()).as("check assignedTodos").isEqualTo(expected.getAssignedTodos()))
            .satisfies(a -> assertThat(a.getBadges()).as("check badges").isEqualTo(expected.getBadges()))
            .satisfies(a -> assertThat(a.getProjectMembers()).as("check projectMembers").isEqualTo(expected.getProjectMembers()));
    }
}
